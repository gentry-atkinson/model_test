#Author: Gentry Atkinson
#Organization: Texas State University
#Data: 09 November, 2021
#Make some nice pyplots for the paper

from matplotlib import pyplot as plt
import numpy as np
import seaborn as sb
import matplotlib.patches as mpatches
import matplotlib.lines as mlines

LABEL_TILT = 25

cnn_all_avg_aer = [
    0.2308,	0.2635,	0.2968,	0.2693,	0.3095,	0.2640,	0.3018,
    0.2507,	0.2822,	0.3118,	0.2917,	0.3315,	0.2868,	0.3265,
    0.2538,	0.2832,	0.3160,	0.2940,	0.3335,	0.2875,	0.3255,
    0.2413,	0.2732,	0.3033,	0.2785,	0.3132,	0.2737,	0.3095,
    0.2927,	0.3210,	0.3485,	0.3090,	0.3278,	0.3062,	0.3227,
    0.2522,	0.2838,	0.3132,	0.2885,	0.3215,	0.2820,	0.3142,
    0.2623,	0.2915,	0.3217,	0.2913,	0.3257,	0.2888,	0.3168
]

lstm_all_avg_aer = [
    0.2497,	0.2810,	0.3110,	0.2873,	0.3242,	0.2822,	0.3187,
    0.2532,	0.2838,	0.3137,	0.2903,	0.3302,	0.2880,	0.3235,
    0.2610,	0.2907,	0.3165,	0.2983,	0.3353,	0.2928,	0.3272,
    0.2558,	0.2872,	0.3160,	0.2900,	0.3270,	0.2868,	0.3198,
    0.2928,	0.3193,	0.3462,	0.3098,	0.3290,	0.3085,	0.3248,
    0.2643,	0.2943,	0.3237,	0.3007,	0.3337,	0.2947,	0.3290,
    0.2742,	0.3018,	0.3317,	0.2983,	0.3232,	0.2963,	0.3192
]

transf_all_avg_aer = [
    0.1977,	0.2297,	0.2665,	0.2457,	0.2965,	0.2447,	0.2928,
    0.2103,	0.2430,	0.2778,	0.2578,	0.3087,	0.2562,	0.3043,
    0.2080,	0.2400,	0.2750,	0.2557,	0.3068,	0.2553,	0.3030,
    0.2000,	0.2335,	0.2680,	0.2465,	0.2965,	0.2460,	0.2918,
    0.2225,	0.2543,	0.2880,	0.2593,	0.3007,	0.2578,	0.2940,
    0.2048,	0.2385,	0.2725,	0.2495,	0.2977,	0.2482,	0.2912,
    0.2135,	0.2457,	0.2788,	0.2515,	0.2933,	0.2503,	0.2882
]

svm_all_avg_aer = [
    0.2143,	0.2462,	0.2797,	0.2508,	0.2883,	0.2448,	0.2797,
    0.2133,	0.2452,	0.2785,	0.2495,	0.2872,	0.2443,	0.2783,
    0.2115,	0.2432,	0.2768,	0.2493,	0.2873,	0.2428,	0.2800,
    0.2230,	0.2548,	0.2872,	0.2555,	0.2910,	0.2515,	0.2825,
    0.2532,	0.2833,	0.3142,	0.2773,	0.3033,	0.2728,	0.2953,
    0.2245,	0.2558,	0.2878,	0.2567,	0.2915,	0.2515,	0.2822,
    0.2442,	0.2747,	0.3063,	0.2677,	0.2930,	0.2620,	0.2840
]

nb_all_avg_aer = [
    0.2515,	0.2835,	0.3153,	0.2902,	0.3285,	0.2833,	0.3212,
    0.2520,	0.2845,	0.3150,	0.2877,	0.3217,	0.2808,	0.3165,
    0.3252,	0.3517,	0.3813,	0.3580,	0.3898,	0.3515,	0.3820,
    0.2772,	0.3075,	0.3372,	0.3097,	0.3443,	0.3042,	0.3382,
    0.2603,	0.2917,	0.3223,	0.2967,	0.3350,	0.2898,	0.3267,
    0.2552,	0.2865,	0.3177,	0.2935,	0.3330,	0.2867,	0.3253,
    0.2593,	0.2907,	0.3223,	0.2982,	0.3377,	0.2898,	0.3277
]

rf_all_avg_aer = [
    0.2098,	0.2435,	0.2787,	0.2508,	0.2920,	0.2437,	0.2847,
    0.1935,	0.2280,	0.2648,	0.2343,	0.2740,	0.2272,	0.2665,
    0.1967,	0.2307,	0.2660,	0.2368,	0.2770,	0.2297,	0.2703,
    0.2227,	0.2563,	0.2898,	0.2597,	0.2953,	0.2530,	0.2892,
    0.2345,	0.2673,	0.2990,	0.2612,	0.2903,	0.2568,	0.2830,
    0.2110,	0.2445,	0.2795,	0.2443,	0.2785,	0.2382,	0.2703,
    0.2592,	0.2893,	0.3208,	0.2863,	0.3138,	0.2792,	0.3048,
]

#transformer avg aers
#different shape from alex's result
#row-> noise type
#col-> dataset
# tran_all_aer = [
#     [0.10, 0.28, 0.38, 0.57, 0.27, 0.29],
#     [0.16, 0.34, 0.39, 0.10, 0.37, 0.31],
#     [0.21, 0.39, 0.41, 0.56, 0.39, 0.36],
#     [0.16, 0.33, 0.44, 0.51, 0.36, 0.37],
#     [0.21, 0.38, 0.49, 0.46, 0.37, 0.41],
#     [0.10, 0.30, 0.38, 0.54, 0.30, 0.37],
#     [0.10, 0.31, 0.38, 0.47, 0.42, 0.44]
# ]

all_all_avg_aer = [(
    cnn_all_avg_aer[i]+ lstm_all_avg_aer[i]+transf_all_avg_aer[i]+ svm_all_avg_aer[i]+nb_all_avg_aer[i]+ rf_all_avg_aer[i])/6 for i in range(49)]

all_model_ss1_avg_aer = [
    0.1275,	0.1627,	0.2030,	0.1655,	0.2085,	0.1483,	0.1857,
    0.1380,	0.1717,	0.2093,	0.1775,	0.2228,	0.1642,	0.2020,
    0.1487,	0.1812,	0.2180,	0.1877,	0.2327,	0.1713,	0.2078,
    0.1387,	0.1722,	0.2107,	0.1733,	0.2145,	0.1582,	0.1922,
    0.1517,	0.1828,	0.2208,	0.1842,	0.2217,	0.1678,	0.1952,
    0.1388,	0.1732,	0.2107,	0.1750,	0.2097,	0.1527,	0.1840,
    0.1498,	0.1803,	0.2230,	0.1827,	0.2190,	0.1610,	0.1880
]

all_model_ss2_avg_aer = [
    0.2850,	0.3135,	0.3477,	0.3177,	0.3497,	0.3158,	0.3448,
    0.2978,	0.3258,	0.3585,	0.3267,	0.3537,	0.3252,	0.3508,
    0.2943,	0.3218,	0.3547,	0.3265,	0.3572,	0.3245,	0.3528,
    0.2975,	0.3252,	0.3588,	0.3295,	0.3612,	0.3280,	0.3573,
    0.3228,	0.3492,	0.3803,	0.3560,	0.3897,	0.3542,	0.3847,
    0.2925,	0.3200,	0.3542,	0.3263,	0.3588,	0.3243,	0.3548,
    0.3098,	0.3360,	0.3688,	0.3435,	0.3757,	0.3415,	0.3710
]

all_model_sn1_avg_aer = [
    0.2402,	0.2653,	0.2933,	0.2898,	0.3430,	0.2873,	0.3348,
    0.2447,	0.2698,	0.2965,	0.2935,	0.3467,	0.2910,	0.3375,
    0.2455,	0.2705,	0.2972,	0.2943,	0.3468,	0.2920,	0.3385,
    0.2455,	0.2707,	0.2977,	0.2945,	0.3463,	0.2920,	0.3380,
    0.2528,	0.2772,	0.3032,	0.3000,	0.3507,	0.2977,	0.3422,
    0.2462,	0.2710,	0.2975,	0.2948,	0.3467,	0.2925,	0.3383,
    0.2510,	0.2755,	0.3023,	0.2990,	0.3500,	0.2967,	0.3415
]

all_model_sn2_avg_aer = [
    0.1548,	0.1910,	0.2275,	0.2013,	0.2528,	0.2048,	0.2550,
    0.1625,	0.1985,	0.2343,	0.2080,	0.2575,	0.2112,	0.2608,
    0.2547,	0.2857,	0.3145,	0.2935,	0.3365,	0.2965,	0.3382,
    0.1667,	0.2023,	0.2377,	0.2102,	0.2580,	0.2140,	0.2618,
    0.1523,	0.1887,	0.2255,	0.1992,	0.2497,	0.2018,	0.2523,
    0.1513,	0.1877,	0.2247,	0.1980,	0.2493,	0.2013,	0.2517,
    0.1513,	0.1877,	0.2243,	0.1982,	0.2492,	0.2012,	0.2515
]

all_model_har1_avg_aer = [
    0.3047,	0.3363,	0.3635,	0.3407,	0.3690,	0.3282,	0.3645,
    0.2777,	0.3125,	0.3417,	0.3140,	0.3422,	0.3017,	0.3375,
    0.2533,	0.2860,	0.3193,	0.2905,	0.3182,	0.2775,	0.3152,
    0.3142,	0.3483,	0.3708,	0.3408,	0.3628,	0.3332,	0.3600,
    0.3315,	0.3620,	0.3842,	0.3438,	0.3530,	0.3393,	0.3515,
    0.3138,	0.3465,	0.3697,	0.3395,	0.3628,	0.3335,	0.3592,
    0.3430,	0.3738,	0.3923,	0.3573,	0.3703,	0.3530,	0.3682
]

all_model_har2_avg_aer = [
    0.2417,	0.2785,	0.3130,	0.2792,	0.3160,	0.2782,	0.3140,
    0.2523,	0.2883,	0.3213,	0.2917,	0.3303,	0.2902,	0.3270,
    0.2597,	0.2942,	0.3280,	0.2997,	0.3385,	0.2978,	0.3355,
    0.2575,	0.2938,	0.3258,	0.2915,	0.3245,	0.2898,	0.3217,
    0.3448,	0.3772,	0.4042,	0.3302,	0.3215,	0.3312,	0.3207,
    0.2693,	0.3052,	0.3377,	0.2995,	0.3285,	0.2968,	0.3242,
    0.3077,	0.3403,	0.3708,	0.3127,	0.3225,	0.3132,	0.3205
]

all_all_avg_aer_2 = [(
    all_model_ss1_avg_aer [i]+all_model_ss2_avg_aer [i]+ all_model_sn1_avg_aer [i]+ all_model_sn2_avg_aer [i]+all_model_har1_avg_aer [i]+ all_model_har2_avg_aer [i])/6 for i in range(49)]

#   Model[0] -> CEV values
#   Model[1] -> SDE values
bias_ss1_dic = {
    'CNN':[[1.240, 0.954, 0.001, 0.072, 0.093, 0.025],
            [1.575, 1.381, 0.035, 0.379, 0.432, 0.225]
        ],
    'LSTM': [[0.096, 0.149, 0.009, 0.507, 0.046, 0.096],
            [0.439, 0.546, 0.134, 1.007, 0.304, 0.438]
        ],
    'SVM': [[0.003, 0.051, 0.772, 2.975, 0.256, 1.557],
            [0.080, 0.320, 1.243, 2.439, 0.716, 1.765]
        ],
    'NB': [[0.591, 2.063, 1.768, 6.273, 1.390, 4.001],
            [1.087, 2.031, 1.880, 3.542, 1.667, 2.829]
        ],
    'RF': [[0.131, 0.432, 0.263, 0.328, 0.164, 0.084],
            [0.512, 0.930, 0.726, 0.810, 0.573, 0.410]
        ]
}

bias_ss2_dic = {
    'CNN':[[0.048, 0.092, 0.147, 0.686, 0.218, 0.763],
            [0.202, 0.279, 0.430, 0.911, 0.548, 1.070]
        ],
    'LSTM': [[0.161, 0.447, 0.274, 0.849, 0.130, 0.481],
            [0.390, 0.685, 0.555, 0.986, 0.485, 0.782]
        ],
    'SVM': [[0.367, 1.623, 0.710, 14.183, 0.800, 2.699],
            [0.219, 0.415, 0.668, 3.009, 0.724, 1.422]
        ],
    'NB': [[3.704, 1.702, 0.284, 0.602, 0.442, 1.141],
            [2.182, 0.670, 0.470, 0.651, 0.620, 1.037]
        ],
    'RF': [[0.198, 0.961, 1.476, 12.703, 1.286, 9.326],
            [0.251, 0.356, 1.022, 2.853, 1.009, 2.492]
        ]
}

bias_bs1_dic = {
    'CNN':[[0.009, 0.002, 0.136, 0.220, 0.027, 0.102],
            [0.131, 0.069, 0.521, 0.664, 0.233, 0.452]
        ],
    'LSTM': [[0.043, 0.000, 0.006, 0.025, 0.003, 0.041],
            [0.293, 0.030, 0.114, 0.224, 0.083, 0.287]
        ],
    'SVM': [[0.007, 0.030, 0.089, 0.235, 0.081, 0.212],
            [0.117, 0.245, 0.422, 0.685, 0.403, 0.651]
        ],
    'NB': [[0.052, 0.048, 0.041, 0.017, 0.001, 0.026],
            [0.322, 0.311, 0.285, 0.185, 0.053, 0.230]
        ],
    'RF': [[0.000, 0.010, 0.076, 0.372, 0.041, 0.261],
            [0.004, 0.139, 0.390, 0.863, 0.288, 0.723]
        ]
}

bias_bs2_dic = {
    'CNN':[[14.123, 5.190, 1.216, 4.678, 0.126, 9.111],
            [5.315, 3.222, 1.559, 3.059, 0.502, 4.269]
        ],
    'LSTM': [[0.692, 0.160, 0.001, 0.000, 0.019, 0.047],
            [1.176, 0.566, 0.038, 0.025, 0.196, 0.307]
        ],
    'SVM': [[], #Values missing
            []  #Values missing
        ],
    'NB': [[0.487, 1.237, 0.005, 0.026, 0.102, 0.024],
            [0.987, 1.573, 0.096, 0.226, 0.452, 0.219]
        ],
    'RF': [[0.001, 0.000, 0.000, 0.037, 0.002, 0.022],
            [0.041, 0.018, 0.031, 0.273, 0.057, 0.210]
        ]
}

bias_har1_dic = {
    'CNN':[[0.121, 3.097, 0.906, 4.672, 1.144, 2.336],
            [0.270, 1.305, 1.087, 1.776, 0.816, 1.326]
        ],
    'LSTM': [[0.254, 1.194, 0.373, 2.738, 0.201, 3.162],
            [0.581, 1.001, 0.437, 1.612, 0.323, 1.646]
        ],
    'SVM': [[], #Values missing
            []  #Values missing
        ],
    'NB': [[],  #Values missing
            []  #Values missing
        ],
    'RF': [[1.516, 4.354, 0.656, 5.701, 2.978, 3.028],
            [1.056, 1.851, 0.586, 2.164, 1.600, 1.642]
        ]
}

bias_har2_dic = {
    'CNN':[[8.764, 33.409, 81.898, 1644.171, 71.722, 296.200],
            [1.642, 0.932, 3.860, 17.439, 1.499, 1.513]
        ],
    'LSTM': [[],    #Values missing
            []      #Values missing
        ],
    'SVM': [[0.172, 0.673, 0.349, 11.237, 0.263, 10.413],
            [0.298, 0.614, 0.479, 2.077, 0.412, 1.925]
        ],
    'NB': [[0.428, 2.858, 0.479, 1.257, 0.585, 2.139],
            [0.557, 1.309, 0.648, 1.087, 0.713, 1.332]
        ],
    'RF': [[1.790, 4.224, 0.288, 2.614, 0.498, 2.108],
            [0.777, 1.075, 0.163, 0.897, 0.323, 0.738]
        ],
}

prec_rec_cnn_dic = {
    'SS1':[
        #Precision
        [
            [0.87,	0.83],
            [0.74,	0.82],
            [0.70,	0.74],
            [0.78,	0.79],
            [0.69,	0.78],
            [0.82,	0.79],
            [0.72,	0.82]
        ],
        #Recall
        [
            [0.82,	0.88],
            [0.85,	0.70],
            [0.77,	0.67],
            [0.74,	0.82],
            [0.65,	0.81],
            [0.72,	0.86],
            [0.75,	0.80]
        ]
    ],
    'SS2':[
        #Precision
        [
            [0.83,	0.64,	0.58,	0.58,	0.70],
            [0.79,	0.61,	0.57,	0.55,	0.70],
            [0.77,	0.58,	0.53,	0.46,	0.61],
            [0.78,	0.68,	0.61,	0.43,	0.71],
            [0.71,	0.71,	0.62,	0.31,	0.75],
            [0.77,	0.68,	0.60,	0.44,	0.75],
            [0.71,	0.71,	0.60,	0.31,	0.77]
        ],
        #Recall
        [
            [0.82,	0.66,	0.59,	0.53,	0.74],
            [0.75,	0.63,	0.56,	0.55,	0.70],
            [0.67,	0.57,	0.51,	0.49,	0.69],
            [0.86,	0.47,	0.62,	0.54,	0.75],
            [0.93,	0.30,	0.64,	0.59,	0.76],
            [0.87,	0.44,	0.62,	0.57,	0.75],
            [0.89,	0.31,	0.63,	0.70,	0.67]
        ]
    ],
    'BS1':[
        #Precision
        [
            [0.64,	0.41],
            [0.62,	0.40],
            [0.61,	0.43],
            [0.58,	0.45],
            [0.54,	0.50],
            [0.59,	0.46],
            [0.53,	0.49]
        ],
        #Recall
        [
            [0.65,	0.39],
            [0.62,	0.40],
            [0.64,	0.40],
            [0.54,	0.50],
            [0.51,	0.53],
            [0.60,	0.44],
            [0.55,	0.47]
        ]
    ],
    'BS2':[
        #Precision
        [
            [0.55,	0.55],
            [0.49,	0.56],
            [0.48,	0.53],
            [0.58,	0.56],
            [0.61,	0.45],
            [0.50,	0.50],
            [0.56,	0.45]
        ],
        #Recall
        [
            [0.04,	0.97],
            [0.22,	0.81],
            [0.13,	0.87],
            [0.14,	0.92],
            [0.15,	0.88],
            [0.02,	0.98],
            [0.16,	0.84]
        ]
    ],
    'HAR1':[
        #Precision
        [
            [0.71,	0.96,	0.61,	0.71,	0.62,	0.69],
            [0.68,	0.91,	0.48,	0.72,	0.55,	0.69],
            [0.58,	0.80,	0.60,	0.61,	0.57,	0.66],
            [0.58,	0.94,	0.75,	0.53,	0.44,	0.70],
            [0.42,	0.87,	0.48,	0.73,	0.29,	0.72],
            [0.46,	0.91,	0.48,	0.77,	0.49,	0.75],
            [0.48,	0.95,	0.57,	0.73,	0.36,	0.64]
        ],
        #Recall
        [
            [0.40,	0.67,	0.82,	0.65,	0.70,	0.92],
            [0.49,	0.57,	0.59,	0.66,	0.62,	0.77],
            [0.43,	0.68,	0.71,	0.52,	0.61,	0.84],
            [0.51,	0.34,	0.61,	0.72,	0.59,	0.93],
            [0.73,	0.26,	0.52,	0.61,	0.16,	0.88],
            [0.46,	0.28,	0.64,	0.57,	0.69,	0.91],
            [0.68,	0.55,	0.52,	0.56,	0.33,	0.91]
        ]
    ],
    'HAR2':[
        #Precision
        [
            [0.82,	0.86,	0.83,	0.79,	0.72,	0.99],
            [0.65,	0.76,	0.83,	0.79,	0.68,	0.96],
            [0.70,	0.71,	0.80,	0.71,	0.62,	0.86],
            [0.83,	0.90,	0.88,	0.80,	0.79,	0.70],
            [0.75,	0.86,	0.73,	0.82,	0.71,	0.43],
            [0.80,	0.87,	0.79,	0.84,	0.74,	0.73],
            [0.75,	0.75,	0.81,	0.77,	0.72,	0.45]
        ],
        #Recall
        [
            [0.86,	0.71,	0.89,	0.68,	0.86,	0.99],
            [0.81,	0.67,	0.65,	0.61,	0.87,	0.93],
            [0.71,	0.70,	0.64,	0.56,	0.80,	0.91],
            [0.91,	0.78,	0.63,	0.76,	0.87,	0.96],
            [0.94,	0.73,	0.79,	0.76,	0.71,	0.80],
            [0.90,	0.69,	0.72,	0.66,	0.90,	0.90],
            [0.91,	0.60,	0.51,	0.73,	0.89,	0.73]
        ]
    ]
}

prec_rec_lstm_dic = {
    'SS1':[
        #Precision
        [
            [0.84,	0.70],
            [0.77,	0.68],
            [0.73,	0.65],
            [0.79,	0.71],
            [0.63,	0.76],
            [0.79,	0.75],
            [0.70,	0.76]
        ],
        #Recall
        [
            [0.64,	0.88],
            [0.64,	0.85],
            [0.58,	0.79],
            [0.57,	0.87],
            [0.64,	0.76],
            [0.67,	0.85],
            [0.62,	0.82]
        ]
    ],
    'SS2':[
        #Precision
        [
            [0.81,	0.66,	0.57,	0.51,	0.66],
            [0.83,	0.58,	0.51,	0.50,	0.61],
            [0.80,	0.56,	0.52,	0.47,	0.55],
            [0.84,	0.58,	0.51,	0.36,	0.59],
            [0.64,	0.67,	0.52,	0.25,	0.61],
            [0.82,	0.63,	0.53,	0.38,	0.67],
            [0.67,	0.64,	0.55,	0.28,	0.62]
        ],
        #Recall
        [
            [0.84,	0.62,	0.50,	0.53,	0.73],
            [0.70,	0.57,	0.53,	0.49,	0.72],
            [0.61,	0.57,	0.51,	0.41,	0.75],
            [0.69,	0.40,	0.51,	0.46,	0.80],
            [0.92,	0.13,	0.56,	0.46,	0.75],
            [0.77,	0.41,	0.57,	0.58,	0.69],
            [0.88,	0.22,	0.56,	0.45,	0.81]
        ]
    ],
    'BS1':[
        #Precision
        [
            [0.64,	0.41],
            [0.62,	0.41],
            [0.61,	0.42],
            [0.59,	0.45],
            [0.53,	0.50],
            [0.58,	0.44],
            [0.54,	0.50]
        ],
        #Recall
        [
            [0.57,	0.49],
            [0.62,	0.41],
            [0.56,	0.47],
            [0.53,	0.51],
            [0.50,	0.52],
            [0.53,	0.49],
            [0.49,	0.55]
        ]
    ],
    'BS2':[
        #Precision
        [
            [0.48,	0.55],
            [0.59,	0.55],
            [0.47,	0.53],
            [0.53,	0.50],
            [0.56,	0.44],
            [0.47,	0.49],
            [0.59,	0.46]
        ],
        #Recall
        [
            [0.21,	0.81],
            [0.02,	0.99],
            [0.27,	0.73],
            [0.21,	0.81],
            [0.19,	0.81],
            [0.19,	0.78],
            [0.27,	0.77]
        ]
    ],
    'HAR1':[
        #Precision
        [
            [0.65,	0.91,	0.50,	0.72,	0.64,	0.66],
            [0.68,	0.91,	0.53,	0.66,	0.57,	0.67],
            [0.69,	0.82,	0.60,	0.65,	0.57,	0.64],
            [0.58,	0.96,	0.63,	0.73,	0.51,	0.68],
            [0.42,	0.95,	0.63,	0.72,	0.44,	0.67],
            [0.71,	0.90,	0.48,	0.70,	0.51,	0.62],
            [0.42,	0.95,	0.61,	0.68,	0.44,	0.66]
        ],
        #Recall
        [
            [0.42,	0.41,	0.83,	0.56,	0.69,	0.92],
            [0.40,	0.60,	0.69,	0.64,	0.65,	0.89],
            [0.37,	0.65,	0.72,	0.65,	0.65,	0.85],
            [0.51,	0.71,	0.61,	0.63,	0.68,	0.94],
            [0.71,	0.71,	0.52,	0.58,	0.20,	0.87],
            [0.38,	0.38,	0.64,	0.64,	0.63,	0.90],
            [0.71,	0.65,	0.50,	0.60,	0.08,	0.91]
        ]
    ],
    'HAR2':[
        #Precision
        [
            [0.79,	0.88,	0.89,	0.77,	0.77,	1.00],
            [0.81,	0.72,	0.78,	0.81,	0.70,	0.88],
            [0.75,	0.71,	0.75,	0.69,	0.69,	0.72],
            [0.74,	0.82,	0.84,	0.66,	0.76,	0.71],
            [0.77,	0.79,	0.72,	0.70,	0.77,	0.50],
            [0.80,	0.79,	0.87,	0.61,	0.76,	0.72],
            [0.82,	0.84,	0.74,	0.87,	0.76,	0.44]
        ],
        #Recall
        [
            [0.90,	0.77,	0.88,	0.71,	0.90,	0.90],
            [0.68,	0.79,	0.84,	0.53,	0.87,	0.95],
            [0.64,	0.74,	0.77,	0.42,	0.80,	0.92],
            [0.80,	0.73,	0.63,	0.72,	0.84,	0.82],
            [0.81,	0.75,	0.85,	0.72,	0.89,	0.02],
            [0.79,	0.79,	0.64,	0.73,	0.84,	0.74],
            [0.79,	0.78,	0.70,	0.68,	0.93,	0.58]
        ]
    ]
}

prec_rec_svm_dic = {
    'SS1':[
        #Precision
        [
            [0.95,	0.96],
            [0.90,	0.93],
            [0.85,	0.88],
            [0.86,	0.96],
            [0.75,	0.96],
            [0.90,	0.97],
            [0.82,	0.97]
        ],
        #Recall
        [
            [0.97,	0.95],
            [0.93,	0.90],
            [0.89,	0.84],
            [0.96,	0.87],
            [0.95,	0.80],
            [0.96,	0.91],
            [0.95,	0.92]
        ]
    ],
    'SS2':[
        #Precision
        [
            [0.94,	0.82,	0.68,	0.54,	0.66],
            [0.90,	0.77,	0.66,	0.53,	0.63],
            [0.85,	0.75,	0.63,	0.49,	0.60],
            [0.90,	0.84,	0.66,	0.41,	0.66],
            [0.64,	0.84,	0.64,	0.28,	0.66],
            [0.91,	0.85,	0.65,	0.42,	0.66],
            [0.84,	0.88,	0.64,	0.32,	0.66]
        ],
        #Recall
        [
            [0.96,	0.88,	0.67,	0.47,	0.69],
            [0.91,	0.84,	0.65,	0.46,	0.67],
            [0.85,	0.80,	0.62,	0.44,	0.63],
            [0.98,	0.65,	0.68,	0.48,	0.69],
            [1.00,	0.24,	0.70,	0.48,	0.69],
            [0.98,	0.63,	0.69,	0.49,	0.69],
            [0.99,	0.47,	0.70,	0.54,	0.69]
        ]
    ],
    'BS1':[
        #Precision
        [
            [0.66,	0.53],
            [0.63,	0.41],
            [0.61,	0.43],
            [0.64,	0.48],
            [0.63,	0.54],
            [0.64,	0.46],
            [0.62,	0.53]
        ],
        #Recall
        [
            [0.53,	0.55],
            [0.54,	0.51],
            [0.57,	0.48],
            [0.45,	0.66],
            [0.41,	0.74],
            [0.46,	0.66],
            [0.41,	0.73]
        ]
    ],
    'BS2':[
        #Precision
        [
            [0.00,	0.55],
            [0.00,	0.55],
            [0.00,	0.53],
            [0.00,	0.50],
            [0.00,	0.44],
            [0.00,	0.50],
            [0.00,	0.45]
        ],
        #Recall
        [
            [0.00,	1.00],
            [0.00,	1.00],
            [0.00,	1.00],
            [0.00,	1.00],
            [0.00,	1.00],
            [0.00,	1.00],
            [0.00,	1.00]
        ]

    ],
    'HAR1':[
        #Precision
        [
            [0.72,	0.97,	0.91,	0.85,	0.78,	0.64],
            [0.70,	0.95,	0.82,	0.83,	0.75,	0.64],
            [0.71,	0.88,	0.83,	0.78,	0.75,	0.67],
            [0.59,	0.97,	0.91,	0.85,	0.58,	0.64],
            [0.59,	0.97,	0.91,	0.85,	0.62,	0.65],
            [0.53,	0.97,	0.91,	0.85,	0.00,	0.68],
            [0.53,	0.97,	0.91,	0.85,	0.00,	0.67]
        ],
        #Recall
        [
            [0.83,	1.00,	0.81,	0.92,	0.44,	0.84],
            [0.80,	0.97,	0.75,	0.87,	0.39,	0.88],
            [0.74,	0.91,	0.79,	0.84,	0.53,	0.80],
            [0.91,	1.00,	0.58,	0.92,	0.11,	0.90],
            [0.93,	1.00,	0.49,	0.92,	0.00,	0.91],
            [0.90,	1.00,	0.61,	0.92,	0.13,	0.92],
            [0.92,	1.00,	0.49,	0.92,	0.00,	0.91]
        ]
    ],
    'HAR2':[
        #Precision
        [
            [0.61,	0.92,	0.87,	0.38,	0.50,	0.80],
            [0.59,	0.88,	0.85,	0.35,	0.46,	0.77],
            [0.53,	0.86,	0.86,	0.35,	0.46,	0.76],
            [0.62,	0.93,	0.77,	0.37,	0.50,	0.58],
            [0.61,	0.94,	0.60,	0.37,	0.49,	0.00],
            [0.61,	0.93,	0.78,	0.37,	0.50,	0.58],
            [0.61,	0.94,	0.60,	0.37,	0.49,	0.00]
        ],
        #Recall
        [
            [0.97,	0.78,	0.43,	0.26,	0.84,	0.50],
            [0.94,	0.74,	0.41,	0.23,	0.80,	0.46],
            [0.90,	0.72,	0.28,	0.26,	0.76,	0.46],
            [0.96,	0.72,	0.34,	0.26,	0.85,	0.46],
            [0.94,	0.70,	0.46,	0.26,	0.86,	0.00],
            [0.96,	0.73,	0.33,	0.26,	0.85,	0.45],
            [0.96,	0.70,	0.45,	0.26,	0.86,	0.00]
        ]
    ]
}

prec_rec_nb_dic = {
    'SS1':[
        #Precision
        [
            [0.96,	0.92],
            [0.90,	0.89],
            [0.87,	0.86],
            [0.97,	0.78],
            [0.97,	0.72],
            [0.98,	0.86],
            [0.99,	0.81]
        ],
        #Recall
        [
            [0.92,	0.96],
            [0.89,	0.90],
            [0.85,	0.87],
            [0.78,	0.97],
            [0.75,	0.96],
            [0.85,	0.98],
            [0.81,	0.99]
        ]
    ],
    'SS2':[
        #Precision
        [
            [0.95,	0.82,	0.66,	0.40,	0.83],
            [0.85,	0.81,	0.59,	0.34,	0.59],
            [0.81,	0.75,	0.60,	0.37,	0.65],
            [0.69,	0.81,	0.68,	0.39,	0.80],
            [0.47,	0.80,	0.69,	0.39,	0.83],
            [0.89,	0.84,	0.68,	0.40,	0.86],
            [0.87,	0.82,	0.71,	0.40,	0.89]
        ],
        #Recall
        [
            [0.94,	0.84,	0.54,	0.85,	0.02],
            [0.94,	0.76,	0.16,	0.91,	0.02],
            [0.88,	0.74,	0.42,	0.80,	0.03],
            [0.95,	0.86,	0.49,	0.67,	0.02],
            [0.96,	0.87,	0.47,	0.56,	0.02],
            [0.98,	0.82,	0.52,	0.85,	0.02],
            [0.98,	0.84,	0.54,	0.85,	0.02]
        ]
    ],
    'BS1':[
        #Precision
        [
            [0.69,	0.39],
            [0.66,	0.40],
            [0.65,	0.41],
            [0.60,	0.44],
            [0.67,	0.38],
            [0.56,	0.49],
            [0.72,	0.39]
        ],
        #Recall
        [
            [0.10,	0.93],
            [0.11,	0.91],
            [0.09,	0.93],
            [0.10,	0.91],
            [0.10,	0.91],
            [0.11,	0.91],
            [0.09,	0.94]
        ]
    ],
    'BS2':[
        #Precision
        [
            [0.67,	0.55],
            [0.86,	0.55],
            [0.46,	0.56],
            [0.58,	0.49],
            [0.58,	0.44],
            [0.57,	0.52],
            [0.76,	0.46]
        ],
        #Recall
        [
            [0.03,	0.99],
            [0.03,	1.00],
            [0.02,	0.98],
            [0.04,	0.97],
            [0.03,	0.97],
            [0.03,	0.98],
            [0.04,	0.99]
        ]

    ],
    'HAR1':[
        #Precision
        [
            [0.74,	1.00,	0.58,	0.82,	0.79,	0.51],
            [0.68,	0.98,	0.47,	0.74,	0.73,	0.85],
            [0.66,	0.90,	0.76,	0.60,	0.67,	0.72],
            [0.60,	1.00,	0.58,	0.82,	0.55,	0.51],
            [0.63,	1.00,	0.58,	0.82,	0.49,	0.52],
            [0.71,	1.00,	0.58,	0.82,	0.70,	0.52],
            [0.67,	1.00,	0.58,	0.82,	0.43,	0.51]
        ],
        #Recall
        [
            [0.82,	0.34,	0.89,	0.35,	0.58,	0.94],
            [0.78,	0.93,	0.89,	0.15,	0.64,	0.88],
            [0.75,	0.87,	0.51,	0.81,	0.53,	0.78],
            [0.86,	0.34,	0.64,	0.35,	0.42,	0.92],
            [0.87,	0.34,	0.54,	0.35,	0.64,	0.92],
            [0.81,	0.34,	0.67,	0.35,	0.74,	0.93],
            [0.83,	0.34,	0.54,	0.35,	0.65,	0.92]
        ]
    ],
    'HAR2':[
        #Precision
        [
            [0.72,	0.95,	0.95,	0.26,	0.45,	0.82],
            [0.64,	0.94,	0.91,	0.29,	0.48,	0.78],
            [0.60,	0.90,	0.86,	0.32,	0.41,	0.76],
            [0.66,	0.90,	0.92,	0.26,	0.45,	0.61],
            [0.64,	0.87,	0.92,	0.25,	0.45,	0.36],
            [0.65,	0.89,	0.92,	0.25,	0.45,	0.60],
            [0.64,	0.86,	0.87,	0.23,	0.45,	0.34]
        ],
        #Recall
        [
            [0.98,	0.79,	0.73,	0.18,	0.86,	0.30],
            [0.94,	0.71,	0.63,	0.23,	0.78,	0.42],
            [0.89,	0.65,	0.61,	0.05,	0.91,	0.44],
            [0.99,	0.78,	0.38,	0.19,	0.86,	0.28],
            [0.99,	0.79,	0.25,	0.19,	0.86,	0.26],
            [0.99,	0.78,	0.37,	0.19,	0.86,	0.27],
            [0.99,	0.79,	0.25,	0.12,	0.86,	0.36]
        ]
    ]
}

prec_rec_rf_dic = {
    'SS1':[
        #Precision
        [
            [0.94,	0.97],
            [0.89,	0.92],
            [0.84,	0.87],
            [0.86,	0.96],
            [0.75,	0.94],
            [0.89,	0.97],
            [0.81,	0.95]
        ],
        #Recall
        [
            [0.97,	0.94],
            [0.93,	0.89],
            [0.88,	0.83],
            [0.95,	0.87],
            [0.92,	0.80],
            [0.97,	0.90],
            [0.94,	0.85]
        ]
    ],
    'SS2':[
        #Precision
        [
            [0.93,	0.82,	0.71,	0.63,	0.79],
            [0.89,	0.76,	0.69,	0.61,	0.75],
            [0.84,	0.75,	0.64,	0.56,	0.71],
            [0.80,	0.83,	0.70,	0.49,	0.79],
            [0.61,	0.85,	0.70,	0.32,	0.81],
            [0.82,	0.86,	0.70,	0.51,	0.80],
            [0.64,	0.91,	0.70,	0.35,	0.79]
        ],
        #Recall
        [
            [0.96,	0.86,	0.74,	0.62,	0.71],
            [0.91,	0.84,	0.70,	0.58,	0.69],
            [0.85,	0.80,	0.65,	0.54,	0.67],
            [0.97,	0.56,	0.75,	0.61,	0.74],
            [1.00,	0.24,	0.75,	0.61,	0.71],
            [0.98,	0.59,	0.75,	0.66,	0.73],
            [0.78,	0.47,	0.72,	0.46,	0.75]
        ]
    ],
    'BS1':[
        #Precision
        [
            [0.70,	0.57],
            [0.67,	0.55],
            [0.65,	0.55],
            [0.64,	0.57],
            [0.60,	0.59],
            [0.64,	0.59],
            [0.61,	0.60]
        ],
        #Recall
        [
            [0.80,	0.43],
            [0.79,	0.40],
            [0.80,	0.35],
            [0.73,	0.46],
            [0.66,	0.52],
            [0.75,	0.45],
            [0.69,	0.56]
        ]
    ],
    'BS2':[
        #Precision
        [
            [0.39,	0.50],
            [0.36,	0.48],
            [0.39,	0.47],
            [0.42,	0.44],
            [0.51,	0.40],
            [0.43,	0.44],
            [0.50,	0.40]
        ],
        #Recall
        [
            [0.36,	0.53],
            [0.34,	0.50],
            [0.35,	0.52],
            [0.35,	0.52],
            [0.44,	0.46],
            [0.36,	0.51],
            [0.42,	0.48]
        ]

    ],
    'HAR1':[
        #Precision
        [
            [0.82,	0.82,	0.76,	0.82,	0.85,	0.48],
            [0.66,	0.96,	0.81,	0.83,	0.77,	0.69],
            [0.72,	0.85,	0.77,	0.72,	0.77,	0.66],
            [0.48,	0.97,	0.87,	0.89,	0.50,	0.82],
            [0.67,	0.83,	0.82,	0.88,	0.58,	0.46],
            [0.52,	0.96,	0.86,	0.85,	0.65,	0.69],
            [0.52,	0.67,	0.81,	0.82,	0.42,	0.45]
        ],
        #Recall
        [
            [0.72,	0.16,	0.81,	0.76,	0.70,	0.97],
            [0.67,	0.72,	0.78,	0.85,	0.70,	0.91],
            [0.67,	0.78,	0.73,	0.76,	0.64,	0.85],
            [0.78,	0.14,	0.62,	0.83,	0.47,	0.96],
            [0.88,	0.99,	0.53,	0.88,	0.10,	0.95],
            [0.80,	0.87,	0.62,	0.88,	0.22,	0.96],
            [0.83,	0.08,	0.48,	0.83,	0.19,	0.94]
        ]
    ],
    'HAR2':[
        #Precision
        [
            [0.80,	0.93,	0.89,	0.45,	0.55,	0.75],
            [0.74,	0.86,	0.81,	0.45,	0.55,	0.75],
            [0.70,	0.85,	0.77,	0.44,	0.52,	0.68],
            [0.79,	0.91,	0.82,	0.44,	0.54,	0.56],
            [0.80,	0.93,	0.69,	0.44,	0.53,	0.28],
            [0.80,	0.92,	0.77,	0.44,	0.56,	0.53],
            [0.78,	0.91,	0.71,	0.47,	0.57,	0.35]
        ],
        #Recall
        [
            [0.98,	0.78,	0.81,	0.49,	0.60,	0.62],
            [0.92,	0.71,	0.75,	0.51,	0.62,	0.56],
            [0.88,	0.67,	0.69,	0.44,	0.62,	0.58],
            [0.98,	0.79,	0.59,	0.47,	0.66,	0.51],
            [0.97,	0.76,	0.64,	0.50,	0.63,	0.45],
            [0.97,	0.80,	0.61,	0.47,	0.62,	0.18],
            [0.98,	0.77,	0.63,	0.55,	0.62,	0.20]
        ]
    ]
}

prec_rec_lstm_dic = {
    'SS1':[
        #Precision
        [
            [0.84,	0.70],
            [0.77,	0.68],
            [0.73,	0.65],
            [0.79,	0.71],
            [0.63,	0.76],
            [0.79,	0.75],
            [0.70,	0.76]
        ],
        #Recall
        [
            [0.64,	0.88],
            [0.64,	0.85],
            [0.58,	0.79],
            [0.57,	0.87],
            [0.64,	0.76],
            [0.67,	0.85],
            [0.62,	0.82]
        ]
    ],
    'SS2':[
        #Precision
        [
            [0.81,	0.66,	0.57,	0.51,	0.66],
            [0.83,	0.58,	0.51,	0.50,	0.61],
            [0.80,	0.56,	0.52,	0.47,	0.55],
            [0.84,	0.58,	0.51,	0.36,	0.59],
            [0.64,	0.67,	0.52,	0.25,	0.61],
            [0.82,	0.63,	0.53,	0.38,	0.67],
            [0.67,	0.64,	0.55,	0.28,	0.62]
        ],
        #Recall
        [
            [0.84,	0.62,	0.50,	0.53,	0.73],
            [0.70,	0.57,	0.53,	0.49,	0.72],
            [0.61,	0.57,	0.51,	0.41,	0.75],
            [0.69,	0.40,	0.51,	0.46,	0.80],
            [0.92,	0.13,	0.56,	0.46,	0.75],
            [0.77,	0.41,	0.57,	0.58,	0.69],
            [0.88,	0.22,	0.56,	0.45,	0.81]
        ]
    ],
    'BS1':[
        #Precision
        [
            [0.64,	0.41],
            [0.62,	0.41],
            [0.61,	0.42],
            [0.59,	0.45],
            [0.53,	0.50],
            [0.58,	0.44],
            [0.54,	0.50]
        ],
        #Recall
        [
            [0.57,	0.49],
            [0.62,	0.41],
            [0.56,	0.47],
            [0.53,	0.51],
            [0.50,	0.52],
            [0.53,	0.49],
            [0.49,	0.55]
        ]
    ],
    'BS2':[
        #Precision
        [
            [0.48,	0.55],
            [0.59,	0.55],
            [0.47,	0.53],
            [0.53,	0.50],
            [0.56,	0.44],
            [0.47,	0.49],
            [0.59,	0.46]
        ],
        #Recall
        [
            [0.21,	0.81],
            [0.02,	0.99],
            [0.27,	0.73],
            [0.21,	0.81],
            [0.19,	0.81],
            [0.19,	0.78],
            [0.27,	0.77]
        ]
    ],
    'HAR1':[
        #Precision
        [
            [0.65,	0.91,	0.50,	0.72,	0.64,	0.66],
            [0.68,	0.91,	0.53,	0.66,	0.57,	0.67],
            [0.69,	0.82,	0.60,	0.65,	0.57,	0.64],
            [0.58,	0.96,	0.63,	0.73,	0.51,	0.68],
            [0.42,	0.95,	0.63,	0.72,	0.44,	0.67],
            [0.71,	0.90,	0.48,	0.70,	0.51,	0.62],
            [0.42,	0.95,	0.61,	0.68,	0.44,	0.66]
        ],
        #Recall
        [
            [0.42,	0.41,	0.83,	0.56,	0.69,	0.92],
            [0.40,	0.60,	0.69,	0.64,	0.65,	0.89],
            [0.37,	0.65,	0.72,	0.65,	0.65,	0.85],
            [0.51,	0.71,	0.61,	0.63,	0.68,	0.94],
            [0.71,	0.71,	0.52,	0.58,	0.20,	0.87],
            [0.38,	0.38,	0.64,	0.64,	0.63,	0.90],
            [0.71,	0.65,	0.50,	0.60,	0.08,	0.91]
        ]
    ],
    'HAR2':[
        #Precision
        [
            [0.79,	0.88,	0.89,	0.77,	0.77,	1.00],
            [0.81,	0.72,	0.78,	0.81,	0.70,	0.88],
            [0.75,	0.71,	0.75,	0.69,	0.69,	0.72],
            [0.74,	0.82,	0.84,	0.66,	0.76,	0.71],
            [0.77,	0.79,	0.72,	0.70,	0.77,	0.50],
            [0.80,	0.79,	0.87,	0.61,	0.76,	0.72],
            [0.82,	0.84,	0.74,	0.87,	0.76,	0.44]
        ],
        #Recall
        [
            [0.90,	0.77,	0.88,	0.71,	0.90,	0.90],
            [0.68,	0.79,	0.84,	0.53,	0.87,	0.95],
            [0.64,	0.74,	0.77,	0.42,	0.80,	0.92],
            [0.80,	0.73,	0.63,	0.72,	0.84,	0.82],
            [0.81,	0.75,	0.85,	0.72,	0.89,	0.02],
            [0.79,	0.79,	0.64,	0.73,	0.84,	0.74],
            [0.79,	0.78,	0.70,	0.68,	0.93,	0.58]
        ]
    ]
}

prec_rec_trans_dic = {
    'SS1':[
        #Precision
        [
            [0.87,	0.95],
            [0.87,	0.82],
            [0.74,	0.85],
            [0.79,	0.89],
            [0.69,	0.93],
            [0.,	0.],
            [0.,	0.]
        ],
        #Recall
        [
            [0.95,	0.85],
            [0.82,	0.82],
            [0.88,	0.68],
            [0.89,	0.80],
            [0.92,	0.70],
            [0.87,	0.93],
            [0.93,	0.87]
        ]
    ],
    'SS2':[
        #Precision
        [
            [0.86,	0.75,	0.62,	0.56,	0.80],
            [0.80,	0.68,	0.60,	0.52,	0.65],
            [0.78,	0.61,	0.56,	0.47,	0.62],
            [0.92,	0.67,	0.63,	0.56,	0.59],
            [0.82,	0.67,	0.68,	0.54,	0.39],
            [0.88,	0.70,	0.70,	0.59,	0.62],
            [0.80,	0.66,	0.72,	0.65,	0.64]
        ],
        #Recall
        [
            [0.95,	0.76,	0.69,	0.51,	0.68],
            [0.91,	0.71,	0.57,	0.36,	0.76],
            [0.77,	0.66,	0.57,	0.37,	0.69],
            [0.80,	0.67,	0.65,	0.55,	0.70],
            [0.92,	0.51,	0.46,	0.59,	0.71],
            [0.92,	0.81,	0.50,	0.51,	0.82],
            [0.99,	0.72,	0.37,	0.65,	0.82]
        ]
    ],
    'BS1':[
        #Precision
        [
            [0.62,	0.00],
            [0.61,	0.00],
            [0.59,	0.00],
            [0.56,	0.00],
            [0.51,	0.00],
            [0.62,	0.00],
            [0.62,	0.00]
        ],
        #Recall
        [
            [1.00 ,	0.00],
            [1.00,	0.00],
            [1.00,	0.00],
            [1.00,	0.00],
            [1.00,	0.00],
            [1.00,	0.00],
            [1.00,	0.00]
        ]
    ],
    'BS2':[
        #Precision
        [
            [0.43,	0.00],
            [0.96,	0.71],
            [0.44,	0.00],
            [0.49,	0.00],
            [0.54,	0.00],
            [0.46,	0.00],
            [0.53,	0.00]
        ],
        #Recall
        [
            [1.00,	0.00],
            [0.91,	0.85],
            [1.00,	0.00],
            [1.00,	0.00],
            [1.00,	0.00],
            [1.00,	0.00],
            [1.00,	0.00]
        ]

    ],
    'HAR1':[
        #Precision
        [
            [0.79,	0.94,	0.57,	0.62,	0.63,	0.96],
            [0.46,	0.92,	0.63,	0.52,	0.54,	0.93],
            [0.68,	0.83,	0.36,	0.34,	0.62,	0.78],
            [0.57,	0.97,	0.51,	0.46,	0.45,	0.98],
            [0.47,	0.96,	0.57,	0.47,	0.35,	0.92],
            [0.68,	0.98,	0.61,	0.69,	0.49,	0.82],
            [0.41,	0.97,	0.42,	0.27,	0.00,	0.99]
        ],
        #Recall
        [
            [0.48,	0.98,	0.78,	0.35,	0.93,	0.86],
            [0.63,	0.83,	0.42,	0.55,	0.74,	0.61],
            [0.43,	0.84,	0.55,	0.19,	0.80,	0.79],
            [0.53,	0.97,	0.47,	0.28,	0.87,	0.87],
            [0.89,	0.96,	0.30,	0.45,	0.30,	0.90],
            [0.64,	0.94,	0.63,	0.34,	0.73,	0.95],
            [1.00 ,	0.97,	0.30,	0.15,	0.00,	0.94]
        ]
    ],
    'HAR2':[
        #Precision
        [
            [0.82,	0.49,	0.42,	0.82,	0.75,	0.99],
            [0.76,	0.43,	0.51,	0.86,	0.70,	0.92],
            [0.68,	0.59,	0.45,	0.76,	0.55,	0.87],
            [0.71,	0.60,	0.51,	0.86,	0.51,	0.71],
            [0.68,	0.60,	0.43,	0.80,	0.69,	0.42],
            [0.77,	0.43,	0.00,	0.78,	0.62,	0.72],
            [0.54,	0.58,	0.57,	0.83,	0.48,	0.43]
        ],
        #Recall
        [
            [0.54,	0.71,	0.38,	0.71,	0.85,	1.00],
            [0.62,	0.78,	0.11,	0.65,	0.88,	0.98],
            [0.57,	0.49,	0.43,	0.51,	0.89,	0.91],
            [0.61,	0.54,	0.31,	0.55,	0.86,	1.00 ],
            [0.51,	0.56,	0.34,	0.59,	0.87,	0.95],
            [0.53,	0.77,	0.00,	0.70,	0.91,	1.00],
            [0.51,	0.45,	0.38,	0.70,	0.92,	0.38]
        ]
    ]
}

"""
Plot 1
Bar Plot
Clean, Avg, and Max AER for all models
Following: https://matplotlib.org/stable/gallery/misc/table_demo.html#sphx-glr-gallery-misc-table-demo-py
"""
def plot1():
    plt.figure()
    clean = [cnn_all_avg_aer[0], lstm_all_avg_aer[0], np.mean(transf_all_avg_aer[0]),svm_all_avg_aer[0],nb_all_avg_aer[0],rf_all_avg_aer[0]]
    avgs = [sum(cnn_all_avg_aer)/49, sum(lstm_all_avg_aer)/49, np.mean(np.mean(transf_all_avg_aer)), sum(svm_all_avg_aer)/49,sum(nb_all_avg_aer)/49,sum(rf_all_avg_aer)/49]
    maxs = [max(cnn_all_avg_aer), max(lstm_all_avg_aer),max(max(transf_all_avg_aer)), max(svm_all_avg_aer),max(nb_all_avg_aer),max(rf_all_avg_aer)]

    n_cols = len(clean)
    cols = ["CNN", "LSTM", 'Transformer', "SVM", "N. Bayes", "R. Forest"]
    colors =  plt.cm.Blues(np.linspace(0.3, 0.8, 3))
    WIDTH = 0.4

    for i in range(n_cols):
        #plt max bar
        plt.bar(cols[i], maxs[i], width=WIDTH, bottom=0, align='center', color=colors[2])
        # #plt avg bar
        plt.bar(cols[i], avgs[i], width=WIDTH, bottom=0, align='center', color=colors[1])
        #plt clean bar
        plt.bar(cols[i], clean[i], width=WIDTH, bottom=0, align='center', color=colors[0])


    ax = plt.gca()
    ax.set_ylim([0.1, 0.6])
    plt.xticks(rotation=LABEL_TILT)
    plt.title("Min/Avg/Max Error for Each Model")
    plt.savefig("imgs/plots/aer_for_all_models.pdf", bbox_inches='tight')

"""
Plot 2
Bar Plot
Min, Avg, and Max AER for all symetrical noise
"""
def plot2():
    plt.figure()
    data = [
        [cnn_all_avg_aer[0], lstm_all_avg_aer[0],transf_all_avg_aer[0], svm_all_avg_aer[0], nb_all_avg_aer[0], rf_all_avg_aer[0]],
        [cnn_all_avg_aer[8], lstm_all_avg_aer[8],transf_all_avg_aer[8], svm_all_avg_aer[8], nb_all_avg_aer[8], rf_all_avg_aer[8]],
        [cnn_all_avg_aer[16], lstm_all_avg_aer[16],transf_all_avg_aer[16], svm_all_avg_aer[16], nb_all_avg_aer[16], rf_all_avg_aer[16]],
        [cnn_all_avg_aer[24], lstm_all_avg_aer[24],transf_all_avg_aer[24], svm_all_avg_aer[24], nb_all_avg_aer[24], rf_all_avg_aer[24]],
        [cnn_all_avg_aer[32], lstm_all_avg_aer[32],transf_all_avg_aer[32], svm_all_avg_aer[32], nb_all_avg_aer[32], rf_all_avg_aer[32]],
        [cnn_all_avg_aer[40], lstm_all_avg_aer[40],transf_all_avg_aer[40], svm_all_avg_aer[40], nb_all_avg_aer[40], rf_all_avg_aer[40]],
        [cnn_all_avg_aer[48], lstm_all_avg_aer[48],transf_all_avg_aer[48], svm_all_avg_aer[48], nb_all_avg_aer[48], rf_all_avg_aer[48]]
    ]

    n_cols = len(data)
    cols = ['Clean', 'NCAR05', 'NCAR10', 'NAR05', 'NAR10', 'NNAR05', 'NNAR10']
    colors =  plt.cm.Blues(np.linspace(0.3, 0.8, 3))
    WIDTH = 0.4

    for i in range(n_cols):
        #plt max bar
        plt.bar(cols[i], max(data[i]), width=WIDTH, bottom=0, align='center', color=colors[2])
        # #plt avg bar
        plt.bar(cols[i], np.mean(data[i]), width=WIDTH, bottom=0, align='center', color=colors[1])
        #plt clean bar
        plt.bar(cols[i], min(data[i]), width=WIDTH, bottom=0, align='center', color=colors[0])

    ax = plt.gca()
    ax.set_ylim([0.1, 0.6])
    plt.xticks(rotation=LABEL_TILT)
    plt.title("Min/Avg/Max Error for Each Noise Class")
    plt.savefig("imgs/plots/aer_for_all_noise.pdf", bbox_inches='tight')

def plotHeatMap(data, title, filename):
    cols = ['Clean', 'NCAR05', 'NCAR10', 'NAR05', 'NAR10', 'NNAR05', 'NNAR10']
    rows = ['SS1','SS2','SN1','SN2','HAR1','HAR2']
    ax = sb.heatmap(data, annot=True,  cmap="YlGnBu", xticklabels=cols, yticklabels=rows)
    plt.xticks(rotation=LABEL_TILT)
    plt.title(title)
    plt.savefig(filename, bbox_inches='tight')

"""
Plot 3
Heat Map
Average AER for all train/test pairs
"""
def plot3():
    plt.figure()
    data = np.reshape(np.array(all_all_avg_aer), (7, 7))
    title = "All Model Avg AER for Each Train/Test"
    filename = "imgs/plots/all_aer_for_test_train_pairs.pdf"
    plotHeatMap(data, title, filename)

"""
Plot 4
Heat Map
CNN AER for all train/test pairs
"""
def plot4():
    plt.figure()
    #data = np.reshape(np.array(cnn_all_avg_aer), (7, 7))
    data = [
        [0.1510, 0.2240,0.2810, 0.2140, 0.2530, 0.2010, 0.2200],
        [0.3310, 0.3590, 0.4140, 0.3550, 0.3860, 0.3540, 0.4000],
        [0.2620, 0.3030,0.3240, 0.3150, 0.3720, 0.3160, 0.3500],
        [0.1700, 0.2020, 0.2340, 0.2200,0.2660, 0.2070, 0.2560],
        [0.3040, 0.3710, 0.3680, 0.3770, 0.4390, 0.4040, 0.3900],
        [0.1670, 0.2340, 0.2750, 0.1900, 0.2510, 0.2100, 0.2850]
    ]
    title = "CNN AER for Each Train/Test"
    filename = "imgs/plots/cnn_aer_for_test_train_pairs.pdf"
    plotHeatMap(data, '', filename)



"""
Plot 5
Heat Map
LSTM AER for all train/test pairs
"""
def plot5():
    plt.figure()
    #data = np.reshape(np.array(lstm_all_avg_aer), (7, 7))
    data = [
        [0.2430, 0.2810, 0.3170, 0.2630, 0.2910, 0.2330, 0.2590],
        [0.3570, 0.4000, 0.4320, 0.4310, 0.4690, 0.4090, 0.4380],
        [0.2340, 0.2600, 0.2880, 0.2870, 0.3420, 0.2840, 0.3340],
        [0.1510, 0.1900, 0.2270, 0.1910, 0.2430, 0.1960, 0.2530],
        [0.3580, 0.3510, 0.3520, 0.3190, 0.3750, 0.3990, 0.3870],
        [0.1550, 0.2210, 0.2830, 0.2490, 0.2540, 0.2470, 0.2440]
    ]
    title = "LSTM AER for Each Train/Test"
    filename = "imgs/plots/lstm_aer_for_test_train_pairs.pdf"
    plotHeatMap(data, '', filename)

"""
Plot 5.5
Heat Map
Trans AER for all train/test pairs
"""
def plot5andAHalf():
    plt.figure()
    #data = np.reshape(np.array(lstm_all_avg_aer), (7, 7))
    data = [
        [0.2270, 0.2580, 0.2870, 0.2840, 0.3430, 0.2790, 0.3310],
        [0.1560, 0.1850, 0.2210, 0.2020, 0.2480, 0.2090, 0.2540],
        [0.2340, 0.2600, 0.2880, 0.2880, 0.3420, 0.2840, 0.3340],
        [0.1540, 0.1830, 0.2270, 0.1900, 0.2450, 0.2090, 0.2520],
        [0.3100, 0.4010, 0.4050, 0.3510, 0.4120, 0.3400, 0.3640],
        [0.1050, 0.1710, 0.2220, 0.1650, 0.2140, 0.1680, 0.1950]
    ]
    title = "Transformer AER for Each Train/Test"
    filename = "imgs/plots/trans_aer_for_test_train_pairs.pdf"
    plotHeatMap(data, '', filename)

"""
Plot 6
Heat Map
SVM AER for all train/test pairs
"""
def plot6():
    plt.figure()
    #data = np.reshape(np.array(svm_all_avg_aer), (7, 7))
    data = [
        [0.0440, 0.0850, 0.1370, 0.0900, 0.1420, 0.0670, 0.1020],
        [0.2690, 0.2960, 0.3330, 0.2980, 0.4030, 0.2990, 0.3300],
        [0.2340, 0.2600, 0.2880, 0.2860, 0.3420, 0.2840, 0.3340],
        [0.1730, 0.2030, 0.2390, 0.2150, 0.2640, 0.2180, 0.2670],
        [0.2000, 0.2290, 0.2360, 0.2430, 0.2510, 0.2380, 0.2530],
        [0.3660, 0.3980, 0.4280, 0.4010, 0.4180, 0.4030, 0.4180]
    ]
    title = "SVM AER for Each Train/Test"
    filename = "imgs/plots/svm_aer_for_test_train_pairs.pdf"
    plotHeatMap(data, '', filename)

"""
Plot 7
Heat Map
Naive Bayes AER for all train/test pairs
"""
def plot7():
    plt.figure()
    #data = np.reshape(np.array(svm_all_avg_aer), (7, 7))
    data = [
        [0.0520, 0.0900, 0.1400, 0.0960, 0.1470, 0.0670, 0.1010],
        [0.3730, 0.4560, 0.4290, 0.4140, 0.4550, 0.4120, 0.4540],
        [0.2340, 0.2600, 0.2880, 0.2860, 0.3420, 0.2840, 0.3360],
        [0.1360, 0.2250, 0.7330, 0.2490, 0.2290, 0.1810, 0.2310],
        [0.3480, 0.2950, 0.2930, 0.4010, 0.3980, 0.3600, 0.4030],
        [0.3660, 0.3810, 0.4050, 0.4120, 0.4390, 0.4160, 0.4410]
    ]
    title = "N.Bayes AER for Each Train/Test"
    filename = "imgs/plots/nb_aer_for_test_train_pairs.pdf"
    plotHeatMap(data, title, filename)

"""
Plot 8
Heat Map
Random Forest AER for all train/test pairs
"""
def plot8():
    plt.figure()
    #data = np.reshape(np.array(svm_all_avg_aer), (7, 7))
    data = [
        [0.0480, 0.0920, 0.1460, 0.0930, 0.1540, 0.0690, 0.1150],
        [0.2240, 0.2590, 0.2990, 0.2770, 0.3770, 0.2630, 0.3500],
        [0.2430, 0.2760, 0.3070, 0.3060, 0.3640, 0.3030, 0.3620],
        [0.1450, 0.1880, 0.2270, 0.1960, 0.2510, 0.1970, 0.2500],
        [0.3080, 0.2280, 0.2620, 0.3540, 0.2430, 0.2600, 0.4120],
        [0.2910, 0.3250, 0.3550, 0.3320, 0.3530, 0.3370, 0.3400]
    ]
    title = "R. Forest AER for Each Train/Test"
    filename = "imgs/plots/rf_aer_for_test_train_pairs.pdf"
    plotHeatMap(data, title, filename)

"""
Plot 9
Heat Map
All model delta AER for all train/test pairs
"""
def plot9():
    plt.figure()
    data = np.reshape(np.array([((all_all_avg_aer[i] - all_all_avg_aer[0])) for i in range(49)]), (7, 7))
    title = "Change in AER for Each Train/Test"
    filename = "imgs/plots/delta_aer_for_test_train_pairs.pdf"
    plotHeatMap(data, title, filename)

"""
Plot 10
Bar Plot
Min, Avg, Max AER for each dataset
"""
def plot10():
    plt.figure()
    data = [
        all_model_ss1_avg_aer, all_model_ss2_avg_aer,
        all_model_sn1_avg_aer, all_model_sn2_avg_aer,
        all_model_har1_avg_aer, all_model_har2_avg_aer,
    ]

    n_cols = len(data)
    cols = ['Synthetic 1', 'Synthetic 2', 'Rain in Australia', 'Room Occupancy', 'TXState HAR', 'UCI HAR']
    colors =  plt.cm.Blues(np.linspace(0.3, 0.8, 3))
    WIDTH = 0.4

    for i in range(n_cols):
        #plt max bar
        plt.bar(cols[i], max(data[i]), width=WIDTH, bottom=0, align='center', color=colors[2])
        # #plt avg bar
        plt.bar(cols[i], np.mean(data[i]), width=WIDTH, bottom=0, align='center', color=colors[1])
        #plt clean bar
        plt.bar(cols[i], min(data[i]), width=WIDTH, bottom=0, align='center', color=colors[0])

    ax = plt.gca()
    ax.set_ylim([0.1, 0.6])
    plt.xticks(rotation=LABEL_TILT)
    plt.title("Min/Avg/Max Error for Each Dataset")
    plt.savefig("imgs/plots/aer_for_all_datasets.pdf", bbox_inches='tight')

"""
Plot 11
Bar Plot
Min, Avg, Max Delta AER for each dataset
"""
def plot11():
    plt.figure()
    data = [
        [all_model_ss1_avg_aer[i] - all_model_ss1_avg_aer[0] for i in range(1, 49)],
        [all_model_ss2_avg_aer[i] - all_model_ss2_avg_aer[0] for i in range(1, 49)],
        [all_model_sn1_avg_aer[i] - all_model_sn1_avg_aer[0] for i in range(1, 49)],
        [all_model_sn2_avg_aer[i] - all_model_sn2_avg_aer[0] for i in range(1, 49)],
        [all_model_har1_avg_aer[i] - all_model_har1_avg_aer[0] for i in range(1, 49)],
        [all_model_har2_avg_aer[i] - all_model_har2_avg_aer[0] for i in range(1, 49)],
    ]

    n_cols = len(data)
    cols = ['Synthetic 1', 'Synthetic 2', 'Rain in Australia', 'Room Occupancy', 'TXState HAR', 'UCI HAR']
    colors =  plt.cm.Blues(np.linspace(0.3, 0.8, 3))
    WIDTH = 0.4

    for i in range(n_cols):
        #plt max bar
        plt.bar(cols[i], max(data[i]), width=WIDTH, bottom=0, align='center', color=colors[2])
        # #plt avg bar
        plt.bar(cols[i], np.mean(data[i]), width=WIDTH, bottom=0, align='center', color=colors[1])
        #plt clean bar
        plt.bar(cols[i], min(data[i]), width=WIDTH, bottom=0, align='center', color=colors[0])

    ax = plt.gca()
    ax.set_ylim([0.0, 0.15])
    plt.xticks(rotation=LABEL_TILT)
    plt.title("Min/Avg/Max Change in Error")
    plt.savefig("imgs/plots/delta_aer_for_all_datasets.pdf", bbox_inches='tight')

"""
Plot 12
Bar Plot
Min, Avg, Max Delta AER for each model
"""
def plot12():
    plt.figure()
    transformer_data = np.mean(transf_all_avg_aer, axis=1)
    data = [
        [cnn_all_avg_aer[i] - cnn_all_avg_aer[0] for i in range(1, 49)],
        [lstm_all_avg_aer[i] - cnn_all_avg_aer[0] for i in range(1, 49)],
        [transf_all_avg_aer[i] - transf_all_avg_aer[0] for i in range(1, 49)],
        [svm_all_avg_aer[i] - cnn_all_avg_aer[0] for i in range(1, 49)],
        [nb_all_avg_aer[i] - cnn_all_avg_aer[0] for i in range(1, 49)],
        [rf_all_avg_aer[i] - cnn_all_avg_aer[0] for i in range(1, 49)],
    ]
    n_cols = len(data)
    cols = ["CNN", "LSTM", "Transformer", "SVM", "N. Bayes", "R. Forest"]
    colors =  plt.cm.Blues(np.linspace(0.3, 0.8, 3))
    WIDTH = 0.4

    for i in range(n_cols):
        #plt max bar
        plt.bar(cols[i], max(data[i]), width=WIDTH, bottom=0, align='center', color=colors[2])
        # #plt avg bar
        plt.bar(cols[i], np.mean(data[i]), width=WIDTH, bottom=0, align='center', color=colors[1])
        #plt clean bar
        plt.bar(cols[i], min(data[i]), width=WIDTH, bottom=0, align='center', color=colors[0])

    ax = plt.gca()
    ax.set_ylim([0.0, 0.15])
    plt.xticks(rotation=LABEL_TILT)
    plt.title("Min/Avg/Max Change in Error")
    plt.savefig("imgs/plots/delta_aer_for_all_models.pdf", bbox_inches='tight')

"""
Plot 13
Bar Plot
Min, Avg, Max Delta AER/% noise for each noise type
TODO
"""
def plot13():
    plt.figure()
    deltas = [
        [all_model_ss1_avg_aer[i] - all_model_ss1_avg_aer[0] for i in range(0, 49)],
        [all_model_ss2_avg_aer[i] - all_model_ss2_avg_aer[0] for i in range(0, 49)],
        [all_model_sn1_avg_aer[i] - all_model_sn1_avg_aer[0] for i in range(0, 49)],
        [all_model_sn2_avg_aer[i] - all_model_sn2_avg_aer[0] for i in range(0, 49)],
        [all_model_har1_avg_aer[i] - all_model_har1_avg_aer[0] for i in range(0, 49)],
        [all_model_har2_avg_aer[i] - all_model_har2_avg_aer[0] for i in range(0, 49)],
    ]

    divisors = [
        1, 5, 10, 5, 10, 5, 10,
        1, 5, 10, 5, 10, 5, 10,
        1, 5, 10, 5, 10, 5, 10,
        1, 5, 10, 5, 10, 5, 10,
        1, 5, 10, 5, 10, 5, 10,
        1, 5, 10, 5, 10, 5, 10,
        1, 5, 10, 5, 10, 5, 10
    ]

    deltas = np.array([np.array(i)/np.array(divisors) for i in deltas])
    #print(np.append(deltas[:, range(1, 49, 7)], deltas[:, range(2, 49, 7)]))
    data = [
        #ncar
        np.reshape([deltas[:,8], deltas[:,9], deltas[:,15], deltas[:,16]], (24)),
        #nar
        np.reshape([deltas[:,24], deltas[:,25], deltas[:,31], deltas[:,32]], (24)),
        #nnar
        np.reshape([deltas[:,40], deltas[:,41], deltas[:,47], deltas[:,48]], (24))
    ]
    n_cols = len(data)
    cols = ['NCAR', 'NAR', 'NNAR']
    colors =  plt.cm.Blues(np.linspace(0.3, 0.8, 3))
    WIDTH = 0.8
    for i in range(n_cols):
        #plt max bar
        #print(max(data[i]))
        plt.bar(cols[i], max(data[i]), width=WIDTH, bottom=0, align='center', color=colors[2])
        # #plt avg bar
        #print(np.mean(data[i]))
        plt.bar(cols[i], np.mean(data[i]), width=WIDTH, bottom=0, align='center', color=colors[1])
        #plt clean bar
        #print(min(data[i]))
        plt.bar(cols[i], min(data[i]), width=WIDTH, bottom=0, align='center', color=colors[0])
    plt.axhline(y=0.0, color='black', linestyle='-')

    ax = plt.gca()
    ax.set_ylim([-0.01, 0.02])
    plt.xticks(rotation=LABEL_TILT)
    plt.title("Change in Error per 1% Label Noise")
    plt.savefig("imgs/plots/delta_aer_per_percent_for_all_noises.pdf", bbox_inches='tight')

"""
Plot 14
Horizontal Bar Plot
Clean, Avg, and Max AER for all models
Following: https://matplotlib.org/stable/gallery/misc/table_demo.html#sphx-glr-gallery-misc-table-demo-py
"""
def plot14():
    plt.figure()
    clean = [cnn_all_avg_aer[0], lstm_all_avg_aer[0],transf_all_avg_aer[0],svm_all_avg_aer[0],nb_all_avg_aer[0],rf_all_avg_aer[0]]
    avgs = [sum(cnn_all_avg_aer)/49, sum(lstm_all_avg_aer)/49, sum(transf_all_avg_aer)/49, sum(svm_all_avg_aer)/49,sum(nb_all_avg_aer)/49,sum(rf_all_avg_aer)/49]
    maxs = [max(cnn_all_avg_aer), max(lstm_all_avg_aer), max(transf_all_avg_aer), max(svm_all_avg_aer),max(nb_all_avg_aer),max(rf_all_avg_aer)]

    n_cols = len(clean)
    cols = ["CNN", "LSTM", "Transformer", "SVM", "N. Bayes", "R. Forest"]
    colors =  plt.cm.Blues(np.linspace(0.3, 0.8, 3))
    WIDTH = 0.4

    for i in range(n_cols):
        #plt max bar
        plt.barh(i, maxs[i], height=WIDTH, color=colors[2])
        # #plt avg bar
        plt.barh(i, avgs[i], height=WIDTH, color=colors[1])
        #plt clean bar
        plt.barh(i, clean[i], height=WIDTH, color=colors[0])


    ax = plt.gca()
    ax.set_yticks(range(len(cols)))
    ax.set_yticklabels(cols)
    plt.xticks(rotation=LABEL_TILT)
    ax.set_xlim([0.1, 0.6])
    plt.title("Min/Avg/Max Error for Each Model")
    plt.savefig("imgs/plots/aer_for_all_models_horizontal.pdf", bbox_inches='tight')

"""
Plot 15
Scatter Plot
CEV and SDE for all models on SS1
"""
def plot15():
    plt.figure()
    models = ["CNN", "LSTM", "SVM", "NB", "RF"]
    for i in range(len(models)):
        plt.scatter(bias_ss1_dic[models[i]][0], bias_ss1_dic[models[i]][1], label=models[i])
    plt.title("CEV/SDE")
    plt.legend()
    plt.savefig("imgs/plots/cev_and_sde_on_ss1.pdf", bbox_inches='tight')

"""
Plot 16
Scatter Plot
CEV and SDE for all models on SS2
"""
def plot16():
    plt.figure()
    models = ["CNN", "LSTM", "SVM", "NB", "RF"]
    for i in range(len(models)):
        plt.scatter(bias_ss2_dic[models[i]][0], bias_ss2_dic[models[i]][1], label=models[i])
    plt.title("CEV/SDE")
    plt.legend()
    plt.savefig("imgs/plots/cev_and_sde_on_ss2.pdf", bbox_inches='tight')

"""
Plot 17
Scatter Plot
CEV and SDE for all models on BS1
"""
def plot17():
    plt.figure()
    models = ["CNN", "LSTM", "SVM", "NB", "RF"]
    for i in range(len(models)):
        plt.scatter(bias_bs1_dic[models[i]][0], bias_bs1_dic[models[i]][1], label=models[i])
    plt.title("CEV/SDE")
    plt.legend()
    plt.savefig("imgs/plots/cev_and_sde_on_bs1.pdf", bbox_inches='tight')

"""
Plot 18
Scatter Plot
CEV and SDE for all models on BS2
"""
def plot18():
    plt.figure()
    models = ["CNN", "LSTM", "SVM", "NB", "RF"]
    for i in range(len(models)):
        plt.scatter(bias_bs2_dic[models[i]][0], bias_bs2_dic[models[i]][1], label=models[i])
    plt.title("CEV/SDE")
    plt.legend()
    plt.savefig("imgs/plots/cev_and_sde_on_bs2.pdf", bbox_inches='tight')

"""
Plot 19
Scatter Plot
CEV and SDE for all models on HAR1
"""
def plot19():
    plt.figure()
    models = ["CNN", "LSTM", "SVM", "NB", "RF"]
    for i in range(len(models)):
        plt.scatter(bias_har1_dic[models[i]][0], bias_har1_dic[models[i]][1], label=models[i])
    plt.title("CEV/SDE")
    plt.legend()
    plt.savefig("imgs/plots/cev_and_sde_on_har1.pdf", bbox_inches='tight')

"""
Plot 20
Scatter Plot
CEV and SDE for all models on HAR2
"""
def plot20():
    plt.figure()
    models = ["CNN", "LSTM", "SVM", "NB", "RF"]
    for i in range(len(models)):
        plt.scatter(bias_har2_dic[models[i]][0], bias_har2_dic[models[i]][1], label=models[i])
    plt.title("CEV/SDE")
    plt.legend()
    plt.savefig("imgs/plots/cev_and_sde_on_har2.pdf", bbox_inches='tight')

# def plot21_temp():
#     plt.figure()
#     models = ["CNN", "LSTM", "SVM", "NB", "RF"]
#     for i in range(len(models)):
#         plt.scatter(bias_ss1_dic[models[i]][0], bias_ss1_dic[models[i]][1], label=models[i])
#     for i in range(len(models)):
#         plt.scatter(bias_bs1_dic[models[i]][0], bias_bs1_dic[models[i]][1], label=models[i])
#     for i in range(len(models)):
#         plt.scatter(bias_bs2_dic[models[i]][0], bias_bs2_dic[models[i]][1], label=models[i])
#     plt.title("CEV/SDE")
#     plt.savefig("imgs/plots/cev_and_sde_on_all_binary_datasets.pdf", bbox_inches='tight')

"""
Plot 21
Heat Map
CNN CEV for dataset/noise type pairs
"""
def plot21():
    plt.figure()
    data = [
        bias_ss1_dic['CNN'][0],
        bias_ss2_dic['CNN'][0],
        bias_har1_dic['CNN'][0],
        bias_har2_dic['CNN'][0],
        bias_bs1_dic['CNN'][0],
        bias_bs2_dic['CNN'][0]
    ]
    cols = ['NCAR05', 'NCAR10', 'NAR05', 'NAR10', 'NNAR05', 'NNAR10']
    rows = ['SS1', 'SS2','HAR1','HAR2','BS1','BS2']
    ax = sb.heatmap(data, annot=True,  cmap="YlGnBu", xticklabels=cols, yticklabels=rows, fmt='.2f')
    plt.xticks(rotation=LABEL_TILT)
    plt.savefig("imgs/plots/cev_on_CNN.pdf", bbox_inches='tight')

"""
Plot 22
Heat Map
LSTM CEV for dataset/noise type pairs
"""
def plot22():
    plt.figure()
    data = [
        bias_ss1_dic['LSTM'][0],
        bias_ss2_dic['LSTM'][0],
        bias_har1_dic['LSTM'][0],
        #bias_har2_dic['LSTM'][0],
        bias_bs1_dic['LSTM'][0],
        bias_bs2_dic['LSTM'][0]
    ]
    cols = ['NCAR05', 'NCAR10', 'NAR05', 'NAR10', 'NNAR05', 'NNAR10']
    rows = ['SS1', 'SS2','HAR1','BS1','BS2']
    ax = sb.heatmap(data, annot=True,  cmap="YlGnBu", xticklabels=cols, yticklabels=rows, fmt='.2f')
    plt.xticks(rotation=LABEL_TILT)
    plt.savefig("imgs/plots/cev_on_LSTM.pdf", bbox_inches='tight')

def prec_rec_scatter(prec_rec_dic, filename):
    marker_dic = {
        'SS1':'.', 'SS2':'o', 'BS1':'x', 'BS2':'X', 'HAR1':'d', 'HAR2':'D'
    }
    noises = ['Clean', 'NCAR05','NCAR10','NAR05','NAR10','NNAR05','NNAR10']
    plt.figure()
    colors =  ['black', 'cornflowerblue', 'blue', 'mediumpurple', 'purple', 'palegreen', 'seagreen']
    for key in prec_rec_dic.keys():
        for i in range(len(prec_rec_dic[key][0])):
            plt.scatter(prec_rec_dic[key][0][i], prec_rec_dic[key][1][i], c=[colors[i]]*len(prec_rec_dic[key][0][i]), marker=marker_dic[key], label=noises[i])
    plt.xlabel("Precision")
    plt.ylabel("Recall")
    ax = plt.gca()
    ax.set_ylim([0.0, 1.0])
    ax.set_xlim([0.0, 1.0])
    plt.savefig(filename, bbox_inches='tight')

"""
Plot 23
Scatter Plot
prec/rec for all datasets and noise types for CNN
"""
def plot23():
    #prec_rec_cnn_dic
    prec_rec_scatter(prec_rec_cnn_dic, "imgs/plots/prec_rec_CNN.pdf")

"""
Plot 24
Scatter Plot
prec/rec for all datasets and noise types for LSTM
"""
def plot24():
    #prec_rec_cnn_dic
    prec_rec_scatter(prec_rec_lstm_dic, "imgs/plots/prec_rec_LSTM.pdf")

"""
Plot 25
Scatter Plot
prec/rec for all datasets and noise types for SVM
"""
def plot25():
    #prec_rec_cnn_dic
    prec_rec_scatter(prec_rec_svm_dic, "imgs/plots/prec_rec_SVM.pdf")

"""
Plot 26
Scatter Plot
prec/rec for all datasets and noise types for NB
"""
def plot26():
    #prec_rec_cnn_dic
    prec_rec_scatter(prec_rec_nb_dic, "imgs/plots/prec_rec_NB.pdf")

"""
Plot 27
Scatter Plot
prec/rec for all datasets and noise types for RF
"""
def plot27():
    #prec_rec_cnn_dic
    prec_rec_scatter(prec_rec_rf_dic, "imgs/plots/prec_rec_RF.pdf")

"""
Plot 28
Scatter Plot
prec/rec for all datasets and noise types for Transfore
"""
def plot28():
    #prec_rec_cnn_dic
    prec_rec_scatter(prec_rec_trans_dic, "imgs/plots/prec_rec_Trans.pdf")

"""
Plot 29
Prec/Rec Legend
"""
def plot29():
    fig = plt.figure()
    colors =  ['black', 'cornflowerblue', 'blue', 'mediumpurple', 'purple', 'palegreen', 'seagreen']
    labels = ['Clean', 'NCAR05','NCAR10','NAR05','NAR10','NNAR05','NNAR10']
    marker_dic = {
        'SS1':'.', 'SS2':'o', 'BS1':'x', 'BS2':'X', 'HAR1':'d', 'HAR2':'D'
    }
    patches = [
        mpatches.Patch(color=color, label=label)
        for label, color in zip(labels, colors)]
    fig.legend(patches, labels, loc='center', frameon=True)
    plt.savefig('imgs/plots/prec_rec_legend_color.pdf', bbox_inches='tight')

    fig = plt.figure()
    # patches = [ plt.plot([],[], marker=marker_dic[k], ms=10, ls="", mec=None, color='black',
    #         label="{:s}".format(k) )[0]  for k in marker_dic.keys() ]
    patches = [mlines.Line2D([], [], color='black', marker=marker_dic[k], linestyle='None', markersize=10, label=k) for k in marker_dic.keys()]
    fig.legend(patches, marker_dic.keys(),loc='center', frameon=True )
    plt.savefig('imgs/plots/prec_rec_legend_marker.pdf', bbox_inches='tight')



if __name__ == '__main__':
    plt.rcParams.update({'font.size': 16})
    plot1()
    # plot2()
    plt.rcParams.update({'font.size': 11})
    # plot3()
    plot4()
    plot5()
    plot5andAHalf()
    plot6()
    plot7()
    plot8()
    # plot9()
    plt.rcParams.update({'font.size': 16})
    # plot10()
    # plot11()
    plot12()
    # plot13()
    # plot14()
    # plot15()
    # plot16()
    # plot17()
    # plot18()
    # plot19()
    # plot20()
    plt.rcParams.update({'font.size': 11})
    # plot21()
    # plot22()
    plt.rcParams.update({'font.size': 16})
    # plot23()
    # plot24()
    # plot25()
    # plot26()
    # plot27()
    # plot28()
    plot29()
